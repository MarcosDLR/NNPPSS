/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.squarepeace.nnppss;

import com.squarepeace.nnppss.Utilities;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author allysson
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
    }
     private DefaultTableModel originalModel; // Variable para almacenar el modelo de datos original
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbsearch = new javax.swing.JLabel();
        jbRefresh = new javax.swing.JButton();
        jtfSearch = new javax.swing.JTextField();
        jcbRegion = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbsearch.setText("Search:");

        jbRefresh.setText("Refresh");
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });

        jtfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfSearchKeyReleased(evt);
            }
        });

        jcbRegion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbRegionItemStateChanged(evt);
            }
        });

        jtData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtDataMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtData);

        jLabel1.setText("Region: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jbsearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jbRefresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbsearch)
                    .addComponent(jtfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbRefresh)
                    .addComponent(jLabel1))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRefreshActionPerformed
        
         // Crear una instancia de Utilities
    Utilities utilities = new Utilities();

    // Descargar el archivo TSV si es necesario
    utilities.DownloadTSv();

    // Crear un nuevo modelo de tabla usando los datos del archivo TSV
    try {
        originalModel = utilities.readTSV();
    } catch (IOException e) {
        // Manejar cualquier excepción que pueda ocurrir al leer el archivo TSV
        e.printStackTrace();
        // Si ocurre un error al leer el archivo, salir del método
        return;
    }

    jtData.setModel(originalModel);

    // Obtener el número de columnas
    int regionColumnIndex = jtData.getColumn("Region").getModelIndex();

    // Verificar si la columna de la región existe
    if (regionColumnIndex != -1) {
        // Crear un conjunto para almacenar valores únicos de la columna de la región
        Set<String> regionSet = new HashSet<>();

        // Iterar sobre las filas para obtener los valores únicos de la región
        for (int row = 0; row < originalModel.getRowCount(); row++) {
            // Obtener el valor de la región en la fila actual
            String region = (String) originalModel.getValueAt(row, regionColumnIndex);

            // Agregar el valor al conjunto
            regionSet.add(region);
        }

        // Limpiar el JComboBox
        jcbRegion.removeAllItems();
        // Agregar la opción para mostrar todas las regiones
        jcbRegion.addItem("Todas las regiones");

        // Agregar los elementos únicos al JComboBox
        for (String region : regionSet) {
            jcbRegion.addItem(region);
        }
    } else {
        System.out.println("La columna de la región no existe en la tabla.");
    }
        
    }//GEN-LAST:event_jbRefreshActionPerformed
     
    private void jtfSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfSearchKeyPressed
        
        Utilities utilities = new Utilities();

        // Crear un nuevo modelo de tabla usando los datos del archivo TSV
        DefaultTableModel model;
        
        try {
            model = utilities.readTSV();
        } catch (IOException e) {
            // Manejar cualquier excepción que pueda ocurrir al leer el archivo TSV
            e.printStackTrace();
            // Si ocurre un error al leer el archivo, salir del método
            return;
        }
        
       TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        jtData.setRowSorter(tr);
        String searchText = jtfSearch.getText().trim();
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + Pattern.quote(searchText)));
    }//GEN-LAST:event_jtfSearchKeyPressed

    private void jcbRegionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbRegionItemStateChanged
        
        // Crear una instancia de Utilities
        Utilities utilities = new Utilities();

        // Si no hay un TableRowSorter establecido, crear uno nuevo
        DefaultTableModel model = (DefaultTableModel) jtData.getModel();

        try {
            model = utilities.readTSV();
        } catch (IOException e) {
            // Manejar cualquier excepción que pueda ocurrir al leer el archivo TSV
            e.printStackTrace();
            // Si ocurre un error al leer el archivo, salir del método
            return;
        }

        // Obtener la región seleccionada
    String selectedRegion = (String) jcbRegion.getSelectedItem(); 

    if (selectedRegion.equals("Todas las regiones")) {
        // Si se selecciona "Todas las regiones", mostrar toda la data sin filtrar
        jtData.setRowSorter(null); // Eliminar cualquier filtro existente
    } else {
        // Filtrar la tabla por la región seleccionada
        TableRowSorter<DefaultTableModel> rowSorter = (TableRowSorter<DefaultTableModel>) jtData.getRowSorter();
        if (rowSorter == null) {
            
            rowSorter = new TableRowSorter<>(model);
            jtData.setRowSorter(rowSorter);
        }
        filtrarTablaPorRegion(rowSorter, selectedRegion);
    }
    
    }//GEN-LAST:event_jcbRegionItemStateChanged

    private void jtfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfSearchKeyReleased
        
      // Obtener el texto ingresado en el JTextField
    String searchText = jtfSearch.getText().trim();

    // Obtener la región seleccionada
    String selectedRegion = (String) jcbRegion.getSelectedItem();

    // Crear un nuevo TableRowSorter si no existe
    TableRowSorter<DefaultTableModel> rowSorter = (TableRowSorter<DefaultTableModel>) jtData.getRowSorter();
    if (rowSorter == null) {
        rowSorter = new TableRowSorter<>(originalModel);
        jtData.setRowSorter(rowSorter);
    }

    // Aplicar el filtro de región si no se selecciona "Todas las regiones"
    if (!selectedRegion.equals("Todas las regiones")) {
        filtrarTablaPorRegion(rowSorter, selectedRegion);
    } else {
        // Si se selecciona "Todas las regiones", eliminar cualquier filtro de región existente
        rowSorter.setRowFilter(null);
    }

    // Aplicar el filtro por texto al TableRowSorter existente
    filtrarTablaPorTextoYRegion(rowSorter, searchText, selectedRegion);
        
    }//GEN-LAST:event_jtfSearchKeyReleased

    private void jtDataMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDataMousePressed
        /* String selectedCellValue = (String) jtData.getValueAt(jtData.getSelectedRow() , jtData.getSelectedColumn());
            System.out.println(selectedCellValue); */

        int selectedRow = jtData.getSelectedRow();
        if (selectedRow != -2) { // Verificar si se ha seleccionado una fila válida
            DefaultTableModel model = (DefaultTableModel) jtData.getModel();
            Object pkgDirectLinkValue = model.getValueAt(selectedRow, getColumnIndexByName(model, "PKG direct link"));
            Object zRIFValue = model.getValueAt(selectedRow, getColumnIndexByName(model, "zRIF"));
            System.out.println("PKG direct link: " + pkgDirectLinkValue); // Imprimir el valor de la columna "PKG direct link"
            System.out.println("zRIF: " + zRIFValue); // Imprimir el valor de la columna "zRIF"
        }
    }//GEN-LAST:event_jtDataMousePressed

    private static void filtrarTablaPorRegion(TableRowSorter<DefaultTableModel> rowSorter, String region) {
        // Crear un RowFilter para filtrar por la región seleccionada
        RowFilter<DefaultTableModel, Integer> rowFilter = new RowFilter<DefaultTableModel, Integer>() {
            @Override
            public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                // Obtener el valor de la región en la fila actual
                String regionInRow = (String) entry.getValue(1); // Supongamos que la columna de región es la primera

                // Comparar el valor de la región en la fila con la región seleccionada
                return regionInRow.equals(region);
            }
        };

        // Establecer el RowFilter en el TableRowSorter
        rowSorter.setRowFilter(rowFilter);
    }
    
    private static void filtrarTablaPorTexto(TableRowSorter<DefaultTableModel> rowSorter, String searchText) {
        // Crear un RowFilter para filtrar por el texto ingresado
        RowFilter<DefaultTableModel, Integer> rowFilter = null;
        try {
            rowFilter = RowFilter.regexFilter("(?i)" + searchText); // Ignore case
        } catch (java.util.regex.PatternSyntaxException e) {
            return; // Si hay un error en la expresión regular, simplemente no aplicamos ningún filtro
        }

        // Obtener los filtros actuales del TableRowSorter
        List<RowFilter<DefaultTableModel, Integer>> filters = new ArrayList<>(1);
        if (rowFilter != null) {
            filters.add(rowFilter);
        }

        // Establecer el RowFilter en el TableRowSorter
        rowSorter.setRowFilter(RowFilter.andFilter(filters));
    }
    
    private static void filtrarTablaPorTextoYRegion(TableRowSorter<DefaultTableModel> rowSorter, String searchText, String region) {
    // Crear un RowFilter para filtrar por el texto ingresado y la región seleccionada
    RowFilter<DefaultTableModel, Integer> rowFilterByText = null;
    RowFilter<DefaultTableModel, Integer> rowFilterByRegion = null;
    try {
        // Filtrar por texto ingresado
        rowFilterByText = RowFilter.regexFilter("(?i)" + searchText); // Ignore case

        // Filtrar por región seleccionada si no se selecciona "Todas las regiones"
        if (!region.equals("Todas las regiones")) {
            rowFilterByRegion = RowFilter.regexFilter("(?i)" + region, 1); // Columna de la región supuesta que es la segunda (índice 1)
        }

        // Combinar los filtros
        RowFilter<DefaultTableModel, Integer> combinedRowFilter;
        if (rowFilterByRegion != null) {
            combinedRowFilter = RowFilter.andFilter(Arrays.asList(rowFilterByText, rowFilterByRegion));
        } else {
            combinedRowFilter = rowFilterByText;
        }

        // Establecer el RowFilter en el TableRowSorter
        rowSorter.setRowFilter(combinedRowFilter);
    } catch (java.util.regex.PatternSyntaxException e) {
        // Si hay un error en la expresión regular, simplemente no aplicamos ningún filtro
        return;
    }
}
    
    private int getColumnIndexByName(DefaultTableModel model, String columnName) {
    for (int i = 0; i < model.getColumnCount(); i++) {
        if (model.getColumnName(i).equals(columnName)) {
            return i;
        }
    }
    return -1; // Si no se encuentra la columna, retornar -1
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
           

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JLabel jbsearch;
    private javax.swing.JComboBox<String> jcbRegion;
    private javax.swing.JTable jtData;
    private javax.swing.JTextField jtfSearch;
    // End of variables declaration//GEN-END:variables
}
